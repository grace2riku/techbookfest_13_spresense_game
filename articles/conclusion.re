= まとめ
3つのゲームについて説明しました。
各ゲームに不具合、課題はありますが基本動作は確認できました。
この章では3つのゲームに共通の課題について書きます。

== スタンドアロン動作
現在3つのゲームすべてシェルからのコマンド実行がゲーム開始のトリガとなっています。
ゲームをプレイするためにシリアルターミナルでコマンド実行が必要というのは使い勝手が悪いです。

この課題を解決するためにつぎの対応を考えました。

=== ゲームローダーの開発
//footnote[ARDUBOY_url][@<href>{https://www.arduboy.com/, ARDUBOY 参考URL}]

Arduinoをベースにしたゲーム環境ARDUBOY@<fn>{ARDUBOY_url}などではプレイするゲームを選択するゲームローダーがあります。
LCDに実行できるゲームを表示し、実行するゲームを選択するようなユーザーインターフェースにすれば使いやすくなると思いました。

=== アプリケーションの自動起動
ゲームローダーができたとしてシェルからゲームローダーを起動するようであれば結局、シェルが必要ということになります。
電源投入時にシェルではなくユーザーアプリケーションを自動的に起動する方法がWebドキュメントのチュートリアルに記載されています。

 * @<href>{https://developer.sony.com/develop/spresense/docs/sdk_tutorials_ja.html#_tips_autostart,21. アプリケーションの自動起動方法}

この方法を使えばシェルからコマンドを実行なしで、電源ONでスタンドアロンで動作するアプリケーションがつくれそうです。


== 重複処理のライブラリ化
3つのゲームで共通で使っている機能としてつぎがあります。

 * APS学習ボードのSW1・SW2割り込み処理（初期化・ハンドラ登録・終了処理）
 * APS学習ボードのLED点灯・消灯

3つのゲームでは同じ処理を関数名を変えて実装していました。

これは機能の重複でメモリ容量的にも無駄です。

こういった共通した・重複した処理はライブラリ化するのが一般的だと思います。

まだ試していませんがSpresense SDKでもライブラリ化できる方法があるようです。
アプリケーションが共通で使う処理はライブラリ化を検討するとよいと思いました。

具体的な実現方法はつぎの情報が参考になりそうです。

 * @<hd>{reference_material|Spresense SDKでライブラリを追加する方法}


== リファクタリング
ゲームのソースコードを掲載していてつぎの感想を持った方が多いと思います。

 * 読みにくい、読めない
 * 処理のまとまりが1画面に収まっていないので動作が追えない

今回とりあえず動作することを第一にサンプルプログラムを流用させていただき、ゲーム機能を追加実装しました。

可読性、変更しやすさなどを考慮できませんでした。この辺はリファクタリングで改善していければ・・・と考えています。


